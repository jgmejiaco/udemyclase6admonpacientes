{"version":3,"sources":["components/Formulario/formulario.jsx","components/Cita/cita.jsx","App.js","reportWebVitals.js","index.js"],"names":["Formulario","crearCita","useState","mascota","propietario","fecha","hora","sintomas","cita","actualizarCita","error","actualizarError","actualizarState","e","target","name","value","className","action","onSubmit","preventDefault","trim","id","uuid","htmlFor","type","placeholder","onChange","Cita","eliminarCita","onClick","App","citasIniciales","JSON","parse","localStorage","getItem","citas","guardarCitas","useEffect","setItem","stringify","nuevasCitas","filter","titulo","length","map","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8de4a80a.chunk.js","sourcesContent":["import React, {Fragment, useState} from 'react'\r\nimport uuid from 'uuid/dist/v4';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Formulario = ({crearCita}) => {\r\n    //  Crear el State de Citas\r\n    //  cita: nombre del STATE (objeto)\r\n    //  actualizarCita: es una función que midifca el state\r\n    const [cita, actualizarCita] = useState({\r\n        mascota: '',\r\n        propietario: '',\r\n        fecha: '',\r\n        hora: '',\r\n        sintomas: ''\r\n    });\r\n\r\n    //  Crear el State de validación\r\n    //  error: nombre del STATE\r\n    //  actualizarError: es una función que midifca el state\r\n    const [error, actualizarError] = useState(false); // Inicia como \"false\" por no se ha ingresado ningún dato.\r\n\r\n\r\n    //  Función que se ejecuta, cada que el usuario escribe en un input\r\n    const actualizarState = (e) => {\r\n        actualizarCita({\r\n             // se copia el valor para tomar los valores de cada uno de los inputs, de no hacerlo, una entrada, reescribe la anterior\r\n            ...cita,\r\n            [e.target.name]: e.target.value,\r\n        })\r\n    }\r\n\r\n    //  Extraer los valores del formulario (Desestructurar objetos es separar cada clave, se convierte en variable individual y así podemos saber su valor)\r\n    const {mascota, propietario, fecha, hora, sintomas} =  cita;\r\n\r\n    //  Se crea la función que detecte el evento enviar datos del formulario\r\n    const submitCita = (e) => {\r\n        e.preventDefault(); //  Se usa, en este caso, para esconder que los datos de un formulario, se visualicen en la URL (Método \"GET\")\r\n        // alert('Enviando datos del formulario');\r\n\r\n        // Validar (Trim se usa para eliminar los campos vacios)\r\n        if(mascota.trim() === '' || propietario.trim() === '' || fecha.trim() === '' || hora.trim() === '' || sintomas.trim() === '') {\r\n            actualizarError(true);\r\n            return; // El return se usa para terminar el ciclo o condicional\r\n        }\r\n\r\n        //  Eliminar el mensaje previo de error para volver a llenar los datos\r\n        actualizarError(false);\r\n\r\n        // Asignar un ID (instalamos la libreria uuid) para generar automáticamente los ID, no deben ser manuales.\r\n        cita.id = uuid();\r\n\r\n        // Crear la cita\r\n        crearCita(cita);\r\n\r\n        // Reiniciar el form\r\n        actualizarCita({\r\n            mascota: '',\r\n            propietario: '',\r\n            fecha: '',\r\n            hora: '',\r\n            sintomas: ''\r\n        });\r\n    }\r\n\r\n    return ( \r\n        <Fragment>\r\n            <h2>Desde el componente del Formulario</h2>\r\n\r\n            {/* Ternario */}\r\n            { error ? <p className=\"alerta-error\">Todos Los campos son obligatorios</p>\r\n            : null }\r\n\r\n            <form action=\"\" onSubmit={submitCita}>\r\n                <label htmlFor=\"\">Nombre Mascota</label>\r\n                <input\r\n                    type=\"text\"\r\n                    name=\"mascota\"\r\n                    className=\"u-full-width\"\r\n                    placeholder=\"Nombre Mascota\"\r\n                    onChange={actualizarState}\r\n                    value={mascota}\r\n                />\r\n                {/*========================================*/}\r\n                <label htmlFor=\"\">Nombre Dueño</label>\r\n                <input\r\n                    type=\"text\"\r\n                    name=\"propietario\"\r\n                    className=\"u-full-width\"\r\n                    placeholder=\"Nombre Dueño Mascota\"\r\n                    onChange={actualizarState}\r\n                    value={propietario}\r\n                />\r\n                {/*========================================*/}\r\n                <label htmlFor=\"\">Fecha de Alta</label>\r\n                <input\r\n                    type=\"date\"\r\n                    name=\"fecha\"\r\n                    className=\"u-full-width\"\r\n                    onChange={actualizarState}\r\n                    value={fecha}\r\n                />\r\n                {/*========================================*/}\r\n                <label htmlFor=\"\">Hora de Alta</label>\r\n                <input\r\n                    type=\"time\"\r\n                    name=\"hora\"\r\n                    className=\"u-full-width\"\r\n                    onChange={actualizarState}\r\n                    value={hora}\r\n                />\r\n                {/*========================================*/}\r\n                <label htmlFor=\"\">Síntomas</label>\r\n                <textarea\r\n                    name=\"sintomas\"\r\n                    // id=\"\"\r\n                    // cols=\"30\"\r\n                    // rows=\"10\"\r\n                    className=\"u-full-width\"\r\n                    onChange={actualizarState}\r\n                    value={sintomas}\r\n                ></textarea>\r\n                {/*========================================*/}\r\n                <button\r\n                    type=\"submit\"\r\n                    name=\"\"\r\n                    className=\"u-full-width button-primary\"\r\n                >Agendar Cita</button>\r\n                {/*========================================*/}\r\n            </form>\r\n        </Fragment>\r\n     );\r\n}\r\nFormulario.propTypes = {\r\n    crearCita: PropTypes.func.isRequired\r\n}\r\n \r\nexport default Formulario;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Cita = ({cita, eliminarCita}) => (\r\n    <div className=\"cita\">\r\n        <p>Mascota: <span>{cita.mascota}</span></p>\r\n        <p>Dueño: <span>{cita.propietario}</span></p>\r\n        <p>Fecha: <span>{cita.fecha}</span></p>\r\n        <p>Hora: <span>{cita.hora}</span></p>\r\n        <p>Síntomas: <span>{cita.sintomas}</span></p>\r\n\r\n        <button\r\n            className=\"button eliminar u-full-width\"\r\n            onClick={() => eliminarCita(cita.id)}\r\n            >Eliminar &times;\r\n        </button>\r\n    </div>\r\n);\r\n\r\nCita.propTypes = {\r\n    cita: PropTypes.object.isRequired,\r\n    eliminarCita: PropTypes.func.isRequired\r\n  }\r\nexport default Cita;","import React, {Fragment, useState, useEffect} from 'react';\nimport Formulario from './components/Formulario/formulario';\nimport Cita from './components/Cita/cita';\n// import PropTypes from 'prop-types';\n\nfunction App() {\n  //  Citas en Local Storage\n  let citasIniciales = JSON.parse(localStorage.getItem('citas'));\n  if(!citasIniciales) {\n    citasIniciales = [];\n  }\n\n  //  Arreglo de citas, toda la lógica la hacemos en \"App.js\" porque su contenedor ppal (one-half column) se ubica aquí mismo en la posición 2, lado derecho; aquí visualizamos el consolidado de todas las citas.\n  const [citas, guardarCitas] = useState(citasIniciales);\n\n  //  Use Effect (es un hook) para realizar ciertas operaciones cuando el state cambia\n  useEffect(() => {\n    let citasIniciales = JSON.parse(localStorage.getItem('citas'));\n    if(citasIniciales) {\n      localStorage.setItem('citas', JSON.stringify(citas));\n    } else {\n      localStorage.setItem('citas', JSON.stringify([]));\n    }\n  }, [citas]); // debemos pasarle un array vacio para poder hacer varias consultas.(api para \"ciclar\")\n\n  //  Función que tome las citas actuales y agregue las nuevas\n  const crearCita = (cita) => {\n    guardarCitas([...citas, cita]);\n  }\n\n  //  Función que elimina una cita por su ID\n  const eliminarCita = (id) => {\n    const nuevasCitas = citas.filter(cita => cita.id !== id);\n    guardarCitas(nuevasCitas);\n  }\n\n  //  Mensaje condicional\n  const titulo = citas.length === 0 ? 'NO hay citas' : 'Administra tus citas';\n\n  return (\n    <Fragment>\n      <h1>Administrador de Citas para Mascotas</h1>\n      \n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"one-half column\">\n            <Formulario\n              crearCita =  {crearCita}\n            />\n          </div>\n          <div className=\"one-half column\">\n            <h2>{titulo}</h2>\n            {citas.map(cita => (\n              <Cita\n                key={cita.id}\n                cita={cita}\n                eliminarCita={eliminarCita}\n              />\n            ))}\n          </div>\n        </div>\n      </div>\n    </Fragment>\n  );\n}\n// Formulario.propTypes = {\n//   crearCita: PropTypes.func.isRequired\n// }\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}